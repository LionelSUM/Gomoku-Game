package Gomoku;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class LoginSystem extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton, registerButton;
    private Map<String, String> users;
    LoginAction loginAction = new LoginAction();

    // 构造函数
    public LoginSystem() {
        setTitle("User Login System");
        setSize(400, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // 初始化用户界面
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2));

        // 用户名和密码输入
        JLabel usernameLabel = new JLabel("User name:");
        usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordField = new JPasswordField();

        // 登录和注册按钮
        loginButton = new JButton("Login");
        registerButton = new JButton("Register");

        panel.add(usernameLabel);
        panel.add(usernameField);
        panel.add(passwordLabel);
        panel.add(passwordField);
        panel.add(loginButton);
        panel.add(registerButton);

        add(panel, BorderLayout.CENTER);

        // 载入用户数据
        users = loadUserData();

        // 添加按钮监听
        loginButton.addActionListener(loginAction);
        registerButton.addActionListener(new RegisterAction());

        setVisible(true);
    }

    // 登录功能
    class LoginAction implements ActionListener {
    	public boolean login;
    	@Override
        public void actionPerformed(ActionEvent e) {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (users.containsKey(username) && users.get(username).equals(password)) {
                JOptionPane.showMessageDialog(null, "Login Successfully！");
                loginButton.setText("next");
                this.login = true;
                dispose(); 
            } else {
            	JOptionPane.showMessageDialog(null, "Wrong Password or Username do not exist！");
            	loginButton.setText("next");
            	this.login = false;
            }
        }
    }
    

    // 注册功能
    class RegisterAction implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (users.containsKey(username)) {
                JOptionPane.showMessageDialog(null, "Username exist, please use other username!");
            } else {
                users.put(username, password);
                saveUserData();
                JOptionPane.showMessageDialog(null, "Register Successfully！");
            }
        }
    }
    
    // 保存用户数据到文件
    private void saveUserData() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("users.dat"))) {
            oos.writeObject(users);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    // 载入用户数据
    private Map<String, String> loadUserData() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("users.dat"))) {
            return (Map<String, String>) ois.readObject();
        } catch (IOException | ClassNotFoundException ex) {
            return new HashMap<>();
        }
    }
    
    //设置全局字体大小
    public static void setUIFont(Font font) {
        java.util.Enumeration<Object> keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof Font) {
                UIManager.put(key, font);
            }
        }
    }
    

    public static void main(String[] args) {
    	setUIFont(new Font("Arial", Font.PLAIN, 20));
    	LoginSystem loginsystem = new LoginSystem();
    	while(true) {
	        try {
				if(loginsystem.loginAction.login == true) {
					JFrame frame = new JFrame("Gomoku Game");
			        GomokuPanel panel = new GomokuPanel();
			        frame.add(panel);
			        frame.setSize(800, 600);
			        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			        frame.setVisible(true);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
        
    }
}